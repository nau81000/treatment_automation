services:
  postgres:
    image: postgres
    container_name: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10
  kestra:
    image: kestra/kestra:latest
    container_name: kestra
    pull_policy: always
    # Note that this setup with a root user is intended for development purpose.
    # Our base image runs without root, but the Docker Compose implementation needs root to access the Docker socket
    user: "root"
    command: server standalone
    environment:
      POSTGRES_DB:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
      DOCKER_SOCK_PATH:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://postgres:5432/$${POSTGRES_DB}
            driverClassName: org.postgresql.Driver
            username: $${POSTGRES_USER}
            password: $${POSTGRES_PASSWORD}
        kestra:
          server:
            basicAuth:
              enabled: false
          repository:
            type: postgres
          storage:
            type: local
            local:
              basePath: "/app/storage"
          queue:
            type: postgres
          tasks:
            tmpDir:
              path: /tmp/kestra-wd/tmp
          url: http://localhost:8080/
    volumes:
      - kestra-data:/app/storage
      - ${DOCKER_SOCK_PATH}:/var/run/docker.sock
      - /tmp/kestra-wd:/tmp/kestra-wd
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_started
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - "./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090

volumes:
  postgres-data:
    driver: local
  kestra-data:
    driver: local
